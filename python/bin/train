#!/usr/bin/env python2.7

#This bin file provides an easy command-line interface to training a linear model
#in scikit learn

import argparse
import sys

pa = argparse.ArgumentParser(description='Linear classifier Wrapper')

pa.add_argument('-t', '--train', action='store', required=True,
	help="Formatted file to train on")
pa.add_argument('-o', '--outfile', action='store', required=True,
	help="File model will be written to")
pa.add_argument('-m', '--model', '--mt', '--model-type', action='store',
	default='logistic', choices=['logistic'], help="type of linear model you want to train (defaults logistic)")
pa.add_argument('-r', '--reg', '--regularization', action='store',
	default='L1', choices=['L1','L2'], help="Regularization method (L1 or L2, default L1)")
pa.add_argument('-f', '--model-format', '--mf', action='store',
	default='binary', choices=['json', 'binary'],
	help="Model format (json or binary, default binary)")
pa.add_argument('--hash', action='store', default=False,
	help="If integer given, will use hash trick with a mod value of integer")
pa.add_argument('-s', '--sparse', action='store', default="False",
	choices=['True', 'False'], help="Sparse output (True or False)")
#pa.add_argument('-e', '--encoding', action='store', default='utf-8',
#	choices=['latin-1', 'utf-8', 'utf-16-be', 'utf-32-be', 'utf-16-le', 'utf-32-le'], help="String encoding type of train file")


args = pa.parse_args()

if args.model == 'logistic':
	from lemkit_train import logistic
	if args.hash == False:
		logistic.train(args.train, args.outfile, save_mode=args.model_format, regularization=args.reg, sparse_output=args.sparse)
	elif (args.hash).isdigit() == True:
		logistic.train(args.train, args.outfile, save_mode=args.model_format, regularization=args.reg, hash_trick=True, hashmod=int(args.hash), sparse_output=args.sparse)
	else:
		print >> sys.stderr, "ERROR: Problem interpreting --hash argument. It should be an integer."
		sys.exit()
	